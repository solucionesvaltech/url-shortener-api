// Code generated by MockGen. DO NOT EDIT.
// Source: metric.go
//
// Generated by this command:
//
//	mockgen -source=metric.go -destination=../../mocks/metricclient.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMetric is a mock of Metric interface.
type MockMetric struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMockRecorder
}

// MockMetricMockRecorder is the mock recorder for MockMetric.
type MockMetricMockRecorder struct {
	mock *MockMetric
}

// NewMockMetric creates a new mock instance.
func NewMockMetric(ctrl *gomock.Controller) *MockMetric {
	mock := &MockMetric{ctrl: ctrl}
	mock.recorder = &MockMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetric) EXPECT() *MockMetricMockRecorder {
	return m.recorder
}

// IncrementCounter mocks base method.
func (m *MockMetric) IncrementCounter(metric string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{metric}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "IncrementCounter", varargs...)
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockMetricMockRecorder) IncrementCounter(metric any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{metric}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockMetric)(nil).IncrementCounter), varargs...)
}

// ObserveHistogram mocks base method.
func (m *MockMetric) ObserveHistogram(metric string, start time.Time, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{metric, start}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ObserveHistogram", varargs...)
}

// ObserveHistogram indicates an expected call of ObserveHistogram.
func (mr *MockMetricMockRecorder) ObserveHistogram(metric, start any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{metric, start}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveHistogram", reflect.TypeOf((*MockMetric)(nil).ObserveHistogram), varargs...)
}

// Start mocks base method.
func (m *MockMetric) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMetricMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetric)(nil).Start))
}
